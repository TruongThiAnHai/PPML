#include <iostream>
#include <stdio.h>
#include <thread>
#include <vector>
#include <cmath>
#include <map>
#include <math.h>
#include <sys/time.h>

#include "helib/helib.h"
#include "HElib_LR.h"


void ReadLRparams(LRpar& LRparams, int max_iter, dMat zTrain,  int polydeg,  long logp){
    LRparams.max_iter= max_iter;
    LRparams.dim1 = zTrain[0].size();
    LRparams.n_training = zTrain.size();   // Power of two
    LRparams.logn = log2(LRparams.n_training);
    // polynomial coefficients
    for(int i=0; i<10; i++){
         LRparams.coeff[i] = 0.0;
    }
    
    // "Scaled" polynomial coefficients
    LRparams.polyscale= 4;
    for(int i=0; i<10; i++){
        LRparams.evalcoeff[i]= to_ZZ("0");
    }
    
    LRparams.max_iter = 25;
    LRparams.coeff[1] =  2.401926612;
    LRparams.coeff[3] = (-1.631249824);
   
    LRparams.evalcoeff[1]=  scaleup(LRparams.coeff[1]/LRparams.coeff[3], logp);
    LRparams.evalcoeff[3]=  scaleup(LRparams.coeff[3], logp);
            
    LRparams.log2polyscale= log2(LRparams.polyscale);
    LRparams.polydeg= polydeg;
    
    LRparams.logp = logp;
  
    LRparams.nslots= zTrain.size();  // POT close to "N*0.8"

ZZ scaleup(double value, const long& l){
    ZZ precision = power2_ZZ(l);
    double dtemp;
    conv(dtemp, precision);
    dtemp *= value;
    ZZ res = to_ZZ(dtemp);
    
    return res;
}

double scaledown(double value, const long& l){
    double res = value;
    for(int j=0; j< l; j++){
        res /= 2;
    }
    return res;
    
}

double inner_prod(dVec u, dVec v, int start = 0){
    double res = 0.0;
    for(int i = start; i < u.size(); ++i) res += u[i] * v[i];
    return res;
}

//! One iteration with the original method
void LR_sigmoid(dVec& theta, dMat zTrain, LRpar& LRparams){
    double* grad = new double[theta.size()];
    for(int i = 0; i < theta.size(); ++i) grad[i] = 0.0;
    for(int k = 0; k < zTrain.size(); ++k){
        double coeff = 1.0 / (1.0 + exp(inner_prod(zTrain[k], theta)));
        for(int i = 0; i < theta.size(); ++i) grad[i] += coeff * zTrain[k][i];
    }
    for(int i = 0; i < theta.size(); ++i) theta[i] += grad[i]/zTrain.size();;
    delete[] grad;
}

// update for one iteration
void LR_poly(dVec& theta, dMat zTrain, LRpar& LRparams){
    double* grad = new double[theta.size()];
    for(int i = 0; i < theta.size(); ++i) grad[i] = 0.0;
    
    // deg=3: (0.5- 1/2 (c1*ip+ c3*(ip)^3))z[k]
    for(int k = 0; k < zTrain.size(); ++k){
        double innerprod = inner_prod(zTrain[k], theta)/8.0;
        double dtemp= innerprod;
        double coeff = 0.0;
        
        for(int i= 1; i< 10; ++i){
            double power= pow(innerprod, i);
            coeff += LRparams.coeff[i] * power;
        }
        
        coeff= 1.0 - coeff;
        
        for(int i = 0; i < theta.size(); ++i) grad[i] += coeff * (zTrain[k][i]/8.0);
    }
    
    for(int i = 0; i < theta.size(); ++i) theta[i] +=  grad[i]/(zTrain.size()/4.0);
    delete[] grad;
}

double getAUC(dVec theta, dMat zTest){
    int n_fail_y1 = 0;
    int n_fail_y0 = 0;
    
    dVec xtheta_y1;
    dVec xtheta_y0;
    
    for(int i = 0; i < zTest.size(); ++i){
        if(zTest[i][0] == 1.0){
            if(inner_prod(zTest[i], theta) < 0) n_fail_y1++;
            xtheta_y1.push_back(zTest[i][0] * inner_prod(zTest[i], theta, 1));
        }
        else{
            if(inner_prod(zTest[i], theta) < 0) n_fail_y0++;
            xtheta_y0.push_back(zTest[i][0] * inner_prod(zTest[i], theta, 1));
        }
    }
    
    double correctness= 100.0 - (100.0 * (n_fail_y0 + n_fail_y1) / zTest.size());
    cout << "Failure rate: (y = 1) " << n_fail_y1 << "/" << xtheta_y1.size() << " + (y = 0) " << n_fail_y0 << "/" ;
    cout << xtheta_y0.size() << " = " <<  (100.0 * (n_fail_y0 + n_fail_y1) / zTest.size()) << " %." << endl;
    cout << "Correctness: " << correctness  << " %." << endl;
    
    
    if(xtheta_y0.size() == 0 || xtheta_y1.size() ==0){
        cout << "n_test_yi = 0 : cannot compute AUC" << endl;
        return 0.0;
    }
    else{
        double auc = 0.0;
        for(int i = 0; i < xtheta_y1.size(); ++i){
            for(int j = 0; j < xtheta_y0.size(); ++j){
                if(xtheta_y0[j] <= xtheta_y1[i]) auc++;
            }
        }
        auc /= xtheta_y1.size() * xtheta_y0.size();
        return auc;
        cout << "AUC: " << auc << endl;
    }
}

long LogReg::getctlvl(Cipher& ctxt){
    long nBits = NumBits(ctxt.mod)-1;
    return nBits;
}

//! @ output ztrain = (2*y[k]-1) * (1, x[k])  -> encryption: zTrainCipher
void LogReg::EncryptData(Cipher*& zTrainCipher, dMat zTrain){
    
    //long slots = LRparams.n_training;
    CZZ**  mvec= new CZZ*[LRparams.dim1];
    // zTrainCipher = (2*y[k]-1) * (1, x[k])
    for (long i = 0; i < LRparams.dim1; ++i){
        mvec[i]= new CZZ[LRparams.nslots];
        for(int k=0; k< LRparams.nslots; ++k){
            if(zTrain[k][i]!=0){
                mvec[i][k].r = scaleup(zTrain[k][i], LRparams.logp-3);  // logp/8
            }
            else{
                mvec[i][k].r = to_ZZ("0");
            }
            mvec[i][k].i = to_ZZ("0");
        }
    }
    
    NTL_EXEC_RANGE(LRparams.dim1, first, last);
    for (long i = first; i < last; ++i){
        zTrainCipher[i] = scheme.encrypt(mvec[i], LRparams.nslots);
    }
    NTL_EXEC_RANGE_END;
    delete[] mvec;

}


void LogReg::show_and_compare(dVec& theta, dMat zTrain, CZZ*& dtheta){
    
   LR_poly(theta, zTrain, LRparams);
    
    double maxErrorBit = 0.0;
    double minRelativeBit= 20.0;
    
    for(int i=0; i< LRparams.dim1; i++){
        ZZ msg_scaleup= scaleup(theta[i], LRparams.logp);
        
        cout << "m " << i << " : ["  <<  msg_scaleup << "], theta: " << theta[i] << endl;   // unencrypted
        
        double theta;
        conv(theta, dtheta[i].r);
        theta = scaledown(theta, LRparams.logp);
        
        cout << "d " << i << " : ["  << dtheta[i].r << "], (HE)theta: " << theta << endl;      // encrypted
        cout << "e " << i << " : ["  << (msg_scaleup - dtheta[i].r)  << "],  ";    // error
        
        
        // Msg-bit
        ZZ msgbnd= dtheta[i].r;
        double MsgBit = 0.0;
        if(msgbnd!=0)
            MsgBit= (log(abs(msgbnd))/log(2)) ;
        cout << "Msg: " << MsgBit << ", ";
        
        // Error-bit
        ZZ error = (msg_scaleup - dtheta[i].r);
        double ErrorBit = 0.0;
        if(error!=0)
            ErrorBit= (log(abs(error))/log(2)) ;
        cout << "Error: " << ErrorBit << endl;
        
        double RelativeBit= MsgBit- ErrorBit;
        
        if(maxErrorBit < ErrorBit) maxErrorBit= ErrorBit;
        if(minRelativeBit > RelativeBit)  minRelativeBit= RelativeBit;
        cout << "-------------------------------------------------------------" << endl;
        
    }
    
    cout << "MAX error bit : " << maxErrorBit << ", Min relative-error bit: " << minRelativeBit<< endl;
    cout << "-------------------------------------------------------------" << endl;
 
    
}

void LogReg::HElogreg(Cipher*& thetaCipher, Cipher*& zTrainCipher,  dMat zTrain){
    auto start= chrono::steady_clock::now();
    
    // zSumCipher = 1/(n/polyscale) * sum (2y[k]-1) x[k] = 1/n * sum z[k]
    // At the first round, we just take zTrainCipher as theta (lvl= 2)
    Cipher* zSumCipher= new Cipher[LRparams.dim1];
    //! rot and sum
    Cipher* ctemp= new Cipher[LRparams.dim1];
    
    NTL_EXEC_RANGE(LRparams.dim1, first, last);
    for (long i = first; i < last; ++i){
        zSumCipher[i]= zTrainCipher[i];
        
        for(long j= 0; j< LRparams.logn; ++j){
            int l = (1<<j);
            ctemp[i] = scheme.leftRotate(zSumCipher[i], l);
            scheme.addAndEqual(zSumCipher[i], ctemp[i]);
        }
    
        scheme.modSwitchAndEqual(zSumCipher[i], LRparams.logn - LRparams.log2polyscale);
        thetaCipher[i] = zSumCipher[i];
    }
    NTL_EXEC_RANGE_END;
    
    auto end = std::chrono::steady_clock::now();
    auto diff = end - start;
    double timeElapsed= chrono::duration <double, milli> (diff).count()/1000.0;
    double totaltime = timeElapsed;
    
    cout << "-------------------------------------------------------------" << endl;
    cout << "1-iter : mod(theta)= " << getctlvl(thetaCipher[0]) << ", running time= "  << timeElapsed << "s, " ;
    cout << "-------------------------------------------------------------" << endl;

    dVec mtheta(LRparams.dim1, 0.0);
    CZZ* dtheta = new CZZ[LRparams.dim1];
    for(int i = 0; i< LRparams.dim1; ++i){
        dtheta[i] = (scheme.decrypt(secretKey, thetaCipher[i]))[0];
    }
    
    show_and_compare(mtheta, zTrain, dtheta);
 
    
    //--------------------------------------------------------------
    double zlvl =  getctlvl(zSumCipher[0]);
    
    for(int j= 1; j< LRparams.max_iter; ++j){
        auto start= chrono::steady_clock::now();
        
        Cipher* gradCipher= new Cipher[LRparams.dim1];
        gradCipher= getgrad_deg3(thetaCipher, zTrainCipher);
              
        double tlvl = getctlvl(thetaCipher[0]);
        double glvl = getctlvl(gradCipher[0]);
        
        NTL_EXEC_RANGE(LRparams.dim1, first, last);
        for (long i = first; i < last; ++i){
            Cipher ztemp = scheme.modEmbed(zSumCipher[i], zlvl- tlvl);
            scheme.addAndEqual(thetaCipher[i], ztemp);
            
            scheme.modEmbedAndEqual(thetaCipher[i], tlvl- glvl);
            scheme.subAndEqual(thetaCipher[i], gradCipher[i]);
        }
        NTL_EXEC_RANGE_END;
        
        
        auto end = std::chrono::steady_clock::now();
        auto diff = end - start;
        double timeElapsed= chrono::duration <double, milli> (diff).count()/1000.0;
        totaltime += timeElapsed;
        
        delete[] gradCipher;
        
        cout << "-------------------------------------------------------------" << endl;
        cout << j+1 << "-iter : mod(theta)= " << getctlvl(thetaCipher[0]) << ", running time= "  << timeElapsed << "s, " ;
        cout << "-------------------------------------------------------------" << endl;
        
        
        for(int i=0; i< LRparams.dim1; ++i){
            dtheta[i] = (scheme.decrypt(secretKey, thetaCipher[i]))[0];
        }
        
        show_and_compare(mtheta, zTrain, dtheta);
    }
    
    
    cout << "Total Evaluation Time = " << totaltime << " s" << endl;

    delete[] zSumCipher;
    delete[] ctemp;
    delete[] dtheta;
   
    
}
Cipher* LogReg::getgrad_deg3(Cipher*& thetaCipher, Cipher*& zTrainCipher){
    
    double tlvl =  getctlvl(thetaCipher[0]);
    double zlvl =  getctlvl(zTrainCipher[0]);
    
    Cipher* ctemp= new Cipher[LRparams.dim1];
    
    NTL_EXEC_RANGE(LRparams.dim1, first, last);
    for (long i = first; i < last; i++){
        ctemp[i] = scheme.modEmbed(zTrainCipher[i], zlvl - tlvl);
        scheme.multAndEqual(ctemp[i], thetaCipher[i]);
    }
    NTL_EXEC_RANGE_END;
    
    Cipher ztheta = ctemp[0];
    for (long i = 1; i < LRparams.dim1; i++){
        scheme.addAndEqual(ztheta, ctemp[i]);
    }
    
    scheme.modSwitchAndEqual(ztheta, LRparams.logp);  // ztheta.lvl : tlvl - logp

 
    //---------------------------------------------------
    //! zSquare= p * (theat*z[k]/8)^2 + p (a1/a3) with  tlvl - 2*logp
    Cipher zSquare= scheme.square(ztheta);
    scheme.modSwitchAndEqual(zSquare, LRparams.logp);
    scheme.addConstAndEqual(zSquare, LRparams.evalcoeff[1]);
    

    //! res[i]= ((z[i]/8) * a3 ) * (ztheta)) * (ztheta^2 + a1/a3))
    Cipher* res= new Cipher[LRparams.dim1];
    
    NTL_EXEC_RANGE(LRparams.dim1, first, last);
    for (long i = first; i < last; ++i){
        res[i]= scheme.multByConst(zTrainCipher[i], LRparams.evalcoeff[3]);
        scheme.modSwitchAndEqual(res[i], LRparams.logp);  // ((z[i]/8) * a3 ) with zlvl - logp
        
        scheme.modEmbedAndEqual(res[i], zlvl - tlvl);
        scheme.multAndEqual(res[i], ztheta);
        scheme.modSwitchAndEqual(res[i], LRparams.logp);  // ((z[i]/8) * a3 ) * (ztheta)) with zlvl - 2*logp
        
        scheme.multAndEqual(res[i], zSquare);
        scheme.modSwitchAndEqual(res[i], LRparams.logp);  // with zlvl - 3*logp
    }
    NTL_EXEC_RANGE_END;
    
    //! (sum res[i]) / (n/polyscale)
    NTL_EXEC_RANGE(LRparams.dim1, first, last);
    for (long i = first; i < last; ++i){
        for(long j= 0; j< LRparams.logn; ++j){
            long l = (1<<j);
            ctemp[i] = scheme.leftRotate(res[i], l);
            scheme.addAndEqual(res[i], ctemp[i]);
        }
       
        scheme.modSwitchAndEqual(res[i], LRparams.logn - LRparams.log2polyscale);
    }
    NTL_EXEC_RANGE_END;
    
    delete[] ctemp;
    return res;
}

